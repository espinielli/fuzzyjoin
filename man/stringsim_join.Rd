% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stringsim_join.R
\name{stringsim_join}
\alias{stringsim_join}
\alias{stringsim_inner_join}
\alias{stringsim_left_join}
\alias{stringsim_right_join}
\alias{stringsim_full_join}
\alias{stringsim_semi_join}
\alias{stringsim_anti_join}
\title{Join two tables based on fuzzy string matching of their columns}
\usage{
stringsim_join(
  x,
  y,
  by = NULL,
  min_sim = 0.75,
  method = c("osa", "lv", "dl", "hamming", "lcs", "qgram", "cosine", "jaccard", "jw",
    "soundex"),
  mode = "inner",
  ignore_case = FALSE,
  similarity_col = NULL,
  ...
)

stringsim_inner_join(x, y, by = NULL, similarity_col = NULL, ...)

stringsim_left_join(x, y, by = NULL, similarity_col = NULL, ...)

stringsim_right_join(x, y, by = NULL, similarity_col = NULL, ...)

stringsim_full_join(x, y, by = NULL, similarity_col = NULL, ...)

stringsim_semi_join(x, y, by = NULL, similarity_col = NULL, ...)

stringsim_anti_join(x, y, by = NULL, similarity_col = NULL, ...)
}
\arguments{
\item{x}{A tbl}

\item{y}{A tbl}

\item{by}{Columns by which to join the two tables}

\item{min_sim}{Minimum similarity to use for joining}

\item{method}{Method for computing string distance, see
\code{stringdist-metrics} in the stringdist package.}

\item{mode}{One of "inner", "left", "right", "full" "semi", or "anti"}

\item{ignore_case}{Whether to be case insensitive (default yes)}

\item{similarity_col}{If given, will add a column with this
name containing the difference between the two}

\item{...}{Arguments passed on to \code{\link{stringsim}}}
}
\description{
Join two tables based on fuzzy string matching of their columns.
This is useful, for example, in matching free-form inputs in
a survey or online form, where it can catch misspellings and
small personal changes.
}
\details{
If \code{method = "soundex"}, the \code{min_sim} is
automatically set to 0.5, since soundex returns either a 0 (match)
or a 1 (no match).
}
\examples{

library(dplyr)
library(ggplot2)
data(diamonds)

d <- tibble(approximate_name = c("Idea", "Premiums", "Premioom",
                                 "VeryGood", "VeryGood", "Faiir"),
            type = 1:6)

# no matches when they are inner-joined:
diamonds \%>\%
  mutate(cut = as.character(cut)) \%>\%
  inner_join(d, by = c(cut = "approximate_name"))

# but we can match when they're fuzzy joined
diamonds \%>\%
  mutate(cut = as.character(cut)) \%>\%
  stringsim_inner_join(d, by = c(cut = "approximate_name"))

}
